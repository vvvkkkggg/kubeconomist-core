package alerter

import (
	"context"
	"fmt"
	"strings"

	"github.com/vvvkkkggg/kubeconomist-core/internal/metrics"
)

// Messenger –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
type Messenger interface {
	SendMessage(ctx context.Context, text string) error
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä (–∫–∞–∫ –≤ –∑–∞–¥–∞–Ω–∏–∏)

type Alerter struct {
	messenger Messenger
}

func NewAlerter(m Messenger) *Alerter {
	return &Alerter{messenger: m}
}

func (a *Alerter) SendReport(ctx context.Context, report metrics.OptimizerRecommendations) error {
	message := a.generateReport(report)
	return a.messenger.SendMessage(ctx, message)
}

func (a *Alerter) generateReport(r metrics.OptimizerRecommendations) string {
	var sb strings.Builder

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
	sb.WriteString("üöÄ *–û—Ç—á–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä–∞*\n\n")
	sb.WriteString("_–†–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å:_\n\n")

	used := false

	// –†–∞–∑–¥–µ–ª VPC
	if len(r.VPCRecommendations) > 0 {
		used = true

		sb.WriteString("üîå *–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ IP-–∞–¥—Ä–µ—Å–∞:*\n")
		for _, vpc := range r.VPCRecommendations {
			status := "üü¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
			if !vpc.IsUsed {
				status = "üî¥ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
			}
			sb.WriteString(fmt.Sprintf(
				"- `%s` (Cloud: `%s`, Folder: `%s`) %s\n",
				vpc.IPAddress,
				vpc.CloudID,
				vpc.FolderID,
				status,
			))
		}
		sb.WriteString("\n")
	}

	// –†–∞–∑–¥–µ–ª DNS
	if len(r.DNSRecommendations) > 0 {
		used = true

		sb.WriteString("üåê *–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ DNS –∑–æ–Ω—ã:*\n")
		for _, dns := range r.DNSRecommendations {
			status := "üü¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
			if !dns.IsUsed {
				status = "üî¥ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
			}
			sb.WriteString(fmt.Sprintf(
				"- `%s` (Cloud: `%s`, Folder: `%s`) %s\n",
				dns.ZoneId,
				dns.CloudID,
				dns.FolderID,
				status,
			))
		}
		sb.WriteString("\n")
	}

	// –†–∞–∑–¥–µ–ª Node
	nodeSavings := 0.0
	if len(r.NodeRecommendations) > 0 {
		used = true

		sb.WriteString("üñ•Ô∏è *–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–æ–¥:*\n")
		for _, node := range r.NodeRecommendations {
			saving := node.CurrentPrice - node.DesiredPrice
			nodeSavings += saving

			sb.WriteString(fmt.Sprintf(
				"* Instance: `%s`\n"+
					"  - CPU: %d ‚Üí %d —è–¥–µ—Ä\n"+
					"  - RAM: %d ‚Üí %d MB\n"+
					"  - –≠–∫–æ–Ω–æ–º–∏—è: *%.2f —Ä—É–±.*\n\n",
				node.InstanceId,
				node.CurrentCores,
				node.DesiredCores,
				node.CurrentMemory,
				node.DesiredMemory,
				saving,
			))
		}
	}

	// –†–∞–∑–¥–µ–ª Platform
	platformSavings := 0.0
	if len(r.PlatformRecommendations) > 0 {
		used = true

		sb.WriteString("üì¶ *–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º:*\n")
		for _, platform := range r.PlatformRecommendations {
			platformSavings += platform.Savings
			sb.WriteString(fmt.Sprintf(
				"* NodeGroup: `%s`\n"+
					"  - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: `%s` ‚Üí `%s`\n"+
					"  - –≠–∫–æ–Ω–æ–º–∏—è: *%.2f —Ä—É–±.*\n\n",
				platform.NodeGroupId,
				platform.CurrentPlatform,
				platform.DesiredPlatform,
				platform.Savings,
			))
		}
	}

	// –ò—Ç–æ–≥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è
	totalSavings := nodeSavings + platformSavings
	if totalSavings > 0 {
		used = true

		sb.WriteString("üí∏ *–ò—Ç–æ–≥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è:*\n")
		sb.WriteString(fmt.Sprintf(
			"- –ù–æ–¥—ã: *%.2f —Ä—É–±.*\n- –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: *%.2f —Ä—É–±.*\n"+
				"‚ú® *–í—Å–µ–≥–æ: %.2f —Ä—É–±.*\n",
			nodeSavings,
			platformSavings,
			totalSavings,
		))
	}

	if !used {
		sb.WriteString("üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∫–ª–∞—Å—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ*")
	} else {
		sb.WriteString("\n_–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã –∏ –ø–æ–≤—ã—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∞_")
	}

	return sb.String()
}
