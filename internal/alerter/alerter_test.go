package alerter

import (
	"fmt"
	"strings"
	"testing"

	"github.com/vvvkkkggg/kubeconomist-core/internal/metrics"
)

func TestGenerateReport_EmptyRecommendations(t *testing.T) {
	a := NewAlerter(nil)
	report := a.generateReport(metrics.OptimizerRecommendations{})

	if !strings.Contains(report, "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è") {
		t.Error("–û—Ç—á–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
	}
}

func TestGenerateReport_FullRecommendations(t *testing.T) {
	a := NewAlerter(nil)

	report := metrics.OptimizerRecommendations{
		VPCRecommendations: []metrics.VPCOptimizerRecommendations{
			{
				IPAddress: "192.168.1.10",
				CloudID:   "aws",
				FolderID:  "prod",
				IsUsed:    false,
			},
		},
		DNSRecommendations: []metrics.DNSOptimizerRecommendations{
			{
				ZoneId:   "zone123",
				CloudID:  "gcp",
				FolderID: "dev",
				IsUsed:   false,
			},
		},
		NodeRecommendations: []metrics.NodeOptimizerRecommendations{
			{
				InstanceId:    "i-123456",
				CurrentCores:  8,
				DesiredCores:  4,
				CurrentMemory: 16384,
				DesiredMemory: 8192,
				CurrentPrice:  5000.50,
				DesiredPrice:  3750.00,
			},
		},
		PlatformRecommendations: []metrics.PlatformOptimizerRecommendations{
			{
				NodeGroupId:     "ng-prod",
				CurrentPlatform: "n1-standard",
				DesiredPlatform: "e2-medium",
				Savings:         1250.75,
			},
		},
	}

	result := a.generateReport(report)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ü–∏–π
	tests := []struct {
		name     string
		expected string
	}{
		{"VPC section", "üîå *–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ IP-–∞–¥—Ä–µ—Å–∞:*"},
		{"DNS section", "üåê *–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ DNS –∑–æ–Ω—ã:*"},
		{"Node section", "üñ•Ô∏è *–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–æ–¥:*"},
		{"Platform section", "üì¶ *–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º:*"},
		{"Total savings", "üí∏ *–ò—Ç–æ–≥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è:*"},
		{"VPC entry", "- `192.168.1.10` (Cloud: `aws`, Folder: `prod`) üî¥ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"},
		{"DNS entry", "- `zone123` (Cloud: `gcp`, Folder: `dev`) üî¥ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"},
		{"Node entry", "  - CPU: 8 ‚Üí 4 —è–¥–µ—Ä"},
		{"Platform entry", "  - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: `n1-standard` ‚Üí `e2-medium`"},
		{"Total calculation", "‚ú® *–í—Å–µ–≥–æ: 2501.25 —Ä—É–±.*"},
	}

	for _, tt := range tests {
		if !strings.Contains(result, tt.expected) {
			t.Errorf("–û—Ç—á–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç: %s", tt.name)
		}
	}
}

func TestGenerateReport_OnlyUnusedResources(t *testing.T) {
	a := NewAlerter(nil)
	report := metrics.OptimizerRecommendations{
		VPCRecommendations: []metrics.VPCOptimizerRecommendations{
			{IPAddress: "10.0.0.5", IsUsed: false},
		},
		DNSRecommendations: []metrics.DNSOptimizerRecommendations{
			{ZoneId: "internal-zone", IsUsed: false},
		},
	}

	result := a.generateReport(report)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —Å–µ–∫—Ü–∏–π —Å —ç–∫–æ–Ω–æ–º–∏–µ–π
	if strings.Contains(result, "üí∏ *–ò—Ç–æ–≥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è:*") {
		t.Error("–û—Ç—á–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–µ–∫—Ü–∏—é —ç–∫–æ–Ω–æ–º–∏–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –Ω–æ–¥–∞–º/–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
	if !strings.Contains(result, "10.0.0.5") || !strings.Contains(result, "internal-zone") {
		t.Error("–û—Ç—á–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã")
	}
}

func TestGenerateReport_NodeOptimizationsOnly(t *testing.T) {
	a := NewAlerter(nil)
	report := metrics.OptimizerRecommendations{
		NodeRecommendations: []metrics.NodeOptimizerRecommendations{
			{
				InstanceId:    "node-1",
				CurrentCores:  16,
				DesiredCores:  8,
				CurrentMemory: 32768,
				DesiredMemory: 16384,
				CurrentPrice:  10000,
				DesiredPrice:  6000,
			},
			{
				InstanceId:    "node-2",
				CurrentCores:  4,
				DesiredCores:  2,
				CurrentMemory: 8192,
				DesiredMemory: 4096,
				CurrentPrice:  2500,
				DesiredPrice:  1500,
			},
		},
	}

	result := a.generateReport(report)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∏ (10000-6000 + 2500-1500 = 5000)
	if !strings.Contains(result, "‚ú® *–í—Å–µ–≥–æ: 5000.00 —Ä—É–±.*") {
		t.Errorf("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –¥–ª—è –Ω–æ–¥: %s", result)
	}

	if !strings.Contains(result, "32768 ‚Üí 16384 MB") {
		t.Error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
	}
}

func TestGenerateReport_MixedSavings(t *testing.T) {
	a := NewAlerter(nil)
	report := metrics.OptimizerRecommendations{
		NodeRecommendations: []metrics.NodeOptimizerRecommendations{
			{CurrentPrice: 5000, DesiredPrice: 4000},
		},
		PlatformRecommendations: []metrics.PlatformOptimizerRecommendations{
			{Savings: 750.25},
			{Savings: 1250.50},
		},
	}

	result := a.generateReport(report)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º–∞—Ä–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏ (1000 + 750.25 + 1250.50 = 3000.75)
	if !strings.Contains(result, "‚ú® *–í—Å–µ–≥–æ: 3000.75 —Ä—É–±.*") {
		t.Errorf("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏: %s", result)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	if !strings.Contains(result, "- –ù–æ–¥—ã: *1000.00 —Ä—É–±.*") ||
		!strings.Contains(result, "- –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: *2000.75 —Ä—É–±.*") {
		t.Error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
	}
}

func TestGenerateReport_NoUnusedResources(t *testing.T) {
	a := NewAlerter(nil)
	report := metrics.OptimizerRecommendations{
		VPCRecommendations: []metrics.VPCOptimizerRecommendations{
			{IsUsed: true},
		},
		DNSRecommendations: []metrics.DNSOptimizerRecommendations{
			{IsUsed: true},
		},
	}

	result := a.generateReport(report)

	// –î–æ–ª–∂–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
	if strings.Contains(result, "–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ IP-–∞–¥—Ä–µ—Å–∞") ||
		strings.Contains(result, "–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ DNS –∑–æ–Ω—ã") {
		t.Error("–û—Ç—á–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–µ–∫—Ü–∏–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤")
	}

	// –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
	if !strings.Contains(result, "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!") {
		t.Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
	}
}

func TestGenerateReport_PlatformOptimizationsOnly(t *testing.T) {
	a := NewAlerter(nil)
	report := metrics.OptimizerRecommendations{
		PlatformRecommendations: []metrics.PlatformOptimizerRecommendations{
			{
				NodeGroupId:     "ng-1",
				CurrentPlatform: "n1-highcpu",
				DesiredPlatform: "e2-custom",
				Savings:         1500.50,
			},
		},
	}

	result := a.generateReport(report)

	fmt.Println(result)

	if !strings.Contains(result, "`n1-highcpu` ‚Üí `e2-custom`") {
		t.Error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º")
	}

	if !strings.Contains(result, "üí∏ *–ò—Ç–æ–≥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è:*") ||
		!strings.Contains(result, "‚ú® *–í—Å–µ–≥–æ: 1500.50 —Ä—É–±.*") {
		t.Error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º")
	}
}
